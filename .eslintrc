{
  "env": {
    "browser": true,
    "es2021": true,
    "node": true
  },
  // Configuration for JavaScript files
  "plugins": ["unused-imports", "jsx-a11y"],
  "extends": ["airbnb-base", "next/core-web-vitals", "plugin:jsx-a11y/recommended"],
  "settings": {
    "import/resolver": {
      "node": {
        "extensions": [".js", ".jsx", ".ts", ".tsx"]
      }
    }
  },
  "globals": {
    "React": true,
    "JSX": true
  },
  "rules": {
    "global-require": "off",
    "prettier/prettier": "warn",
    //#region  //*=========== Unused Import ===========
    "@typescript-eslint/no-unused-vars": "off",
    "unused-imports/no-unused-imports": "warn",
    "unused-imports/no-unused-vars": [
      "warn",
      {
        "vars": "all",
        "varsIgnorePattern": "^_",
        "args": "after-used",
        "argsIgnorePattern": "^_"
      }
    ]
  },

  "overrides": [
    // Configuration for TypeScript files
    {
      "files": ["**/*.ts", "**/*.tsx"],
      "plugins": ["@typescript-eslint", "unused-imports", "tailwindcss", "simple-import-sort"],
      "extends": [
        "eslint:recommended",
        "next",
        "next/core-web-vitals",
        "plugin:tailwindcss/recommended",
        "airbnb-typescript",
        "plugin:prettier/recommended",
        "prettier"
      ],

      "parserOptions": {
        "project": "./tsconfig.json"
      },
      "rules": {
        "no-unused-vars": "off",
        "no-console": "warn",
        "@typescript-eslint/explicit-module-boundary-types": "off",

        "react/display-name": "off",
        "react/jsx-curly-brace-presence": ["warn", { "props": "never", "children": "never" }],

        //#region  //*=========== Unused Import ===========
        "@typescript-eslint/no-unused-vars": "off",
        "unused-imports/no-unused-imports": "warn",
        "unused-imports/no-unused-vars": [
          "warn",
          {
            "vars": "all",
            "varsIgnorePattern": "^_",
            "args": "after-used",
            "argsIgnorePattern": "^_"
          }
        ],

        //#region  //*=========== Import Sort ===========
        "simple-import-sort/exports": "warn",
        "simple-import-sort/imports": [
          "warn",
          {
            "groups": [
              // ext library & side effect imports
              ["^@?\\w", "^\\u0000"],
              // {s}css files
              ["^.+\\.s?css$"],
              // Lib and hooks
              ["^@/lib", "^@/hooks"],
              // static data
              ["^@/data"],
              // components
              ["^@/components", "^@/container"],
              // zustand store
              ["^@/store"],
              // Other imports
              ["^@/"],
              // relative paths up until 3 level
              [
                "^\\./?$",
                "^\\.(?!/?$)",
                "^\\.\\./?$",
                "^\\.\\.(?!/?$)",
                "^\\.\\./\\.\\./?$",
                "^\\.\\./\\.\\.(?!/?$)",
                "^\\.\\./\\.\\./\\.\\./?$",
                "^\\.\\./\\.\\./\\.\\.(?!/?$)"
              ],
              ["^@/types"],
              // other that didnt fit in
              ["^"]
            ]
          }
        ],
        //#endregion  //*======== Import Sort ===========

        "prettier/prettier": [
          "error",
          {
            "singleQuote": true,
            "endOfLine": "auto"
          }
        ],
        "react/destructuring-assignment": "off", // Vscode doesn't support automatically destructuring, it's a pain to add a new variable
        "jsx-a11y/anchor-is-valid": "off",
        "react/require-default-props": "off", // Allow non-defined react props as undefined
        "react/jsx-props-no-spreading": "off", // _app.tsx uses spread operator and also, react-hook-form
        "react-hooks/exhaustive-deps": "off", // Incorrectly report needed dependency with Next.js router
        "@next/next/no-img-element": "off", // We currently not using next/image because it isn't supported with SSG mode
        "@typescript-eslint/comma-dangle": "off", // Avoid conflict rule between Eslint and Prettier
        "import/prefer-default-export": "off", // Named export is easier to refactor automatically
        "tailwindcss/classnames-order": [
          "warn",
          {
            "officialSorting": true
          }
        ] // Follow the same ordering as the official plugin `prettier-plugin-tailwindcss`
      }
    }
  ]
}
